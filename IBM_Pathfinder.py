# -*- coding: utf-8 -*-
"""BiglyAStarImplementation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1awRFuyuElRnioAHZpbuH58fudP0vhayi

We have a simple breadth-first search that finds us a path through the given graph. It is not very complex, and does not optimize for anything in particular at the moment.
"""

import copy
from scipy.spatial import cKDTree
import numpy as np
from queue import PriorityQueue
import math


# Planning

def bounded(l):
  return -1 < l[0] and l[0] < 360 and -90 < l[1] and l[1] < 90
#Swift completed

def neighbors(l, tree, points):
  neighbors = []
  directions = [(0.0625, 0), (-0.0625, 0), (0, 0.0625), (0, -0.0625)]
  for d in directions:
    dx, dy = l[0] + d[0], l[1] + d[1]
    if bounded((dx, dy)) and len(tree.query_ball_point((dx, dy), 2)) == 0: #Within 2 degrees for neighbor; Impact: Within 2 degrees
      neighbors.append((dx, dy))
  return neighbors
#Swift Completed
def heuristic(current, goal):
  """Current and goal are both tuples of form (x, y)"""
  return np.abs(current[0] - goal[0]) + np.abs(current[1] - goal[1])
  # return np.sqrt((current[0] - goal[0])**2 + (current[1] - goal[1])**2)
  #Swift Completed

def pathfind(start, end, points):
  # Breadth-first Search with Path Tracking
  tree = cKDTree(points)

  frontier = PriorityQueue()
  frontier.put((0, start)) #First integer: Distance
  came_from = {start: None} #Dict
  while frontier:
    c = frontier.get()[1]
    if c == end:
      break
    for n in neighbors(c, tree, points):
      if n not in came_from:
        frontier.put((heuristic(n, end), n))
        came_from[n] = c

  # Reconstruct
  c, path = end, []
  while c != start:
    path.append(c)
    c = came_from[c]
  path.reverse()
  return path

def slope(p1, p2):
  dx = p2[0]-p1[0]
  dy = p2[1]-p1[1]

  if dx != 0:
    return 1
  elif dy != 0:
    return -1
  #Swift Completed

def diff(l):
  return [slope(l[i], l[i+1]) for i in range(len(l)-1)] + [slope(l[-2], l[-1])]

heuristic((0, 0), (80, 35))

#Perform coordinate transformation from horizontal to equatorial
#Developed a breadth-first pathfinder in Swift that uses a KDTree and priority queue to
#allow a telescope to move to a given equatorial coordinate without collision with itself.

# A = azimuth, a = altitude, RA = alpha, t = local sidereal time, phi = observer's latitude, delta = declination

def time2degrees(h, m, s):
  return h*15 + m/4 + s/240
  #Swift Completed

def arc2degrees(deg, amin, asec):
  return deg + amin/60 + asec/3600
  #Swift Completed

# A = azimuth, h = altitude, RA = alpha, theta = local sidereal time, phi = observer's latitude, delta = declination
def transform_coords(h, A, phi, theta):
  h = np.radians(h)
  A = np.radians(A)
  phi = np.radians(phi)

  #H = np.degrees(np.arctan(np.sin(A) / (np.cos(A)*np.sin(phi) + np.tan(h)*np.cos(phi))))

  delta = np.degrees(np.arcsin(np.sin(phi)*np.sin(h) - np.cos(phi)*np.cos(h)*np.cos(A)))
  H = np.arccos((np.sin(h)-np.sin(phi)*np.sin(np.radians(delta)))/(np.cos(phi)*np.cos(np.radians(delta))))
  H = np.degrees(H) # split to make easier to read
  #H = 360 - H if np.sin(A) > 0 else

  alpha = theta - H
  alpha = alpha + 360 if alpha < 0 else alpha

  return (alpha, delta)

th = 51.67147
print(f"(alpha, delta) = {transform_coords(15.1249, 68.0337, arc2degrees(38, 55, 17), th)}")
print(" ")

print(f"The right ascension should be: {time2degrees(23, 9, 16.641)}")
print(f"The declination should be: {arc2degrees(-6, -43, -11.61)}")
#Swift Completed

"""When using an unweighted graph as we are, the pathfinding has no issues planning a path that goes right next to the no-go zone. This is a problem as even getting close to the no-go zone should probably be prevented. This problem is usually solved with a weighted graph and a pathfinding algorithm that chooses the 'cheapest' path. In this case, cost would be a value reflective of how close a particular node is to an inaccessible one.

However, this is annoying to implement. We could, but a cheaper and simpler way to handle this (until we do need something more complex) is to simply set the nodes around the no-go zone as also being inaccessible. We simply set the cells within radius $r$ around each no-go zone as also being inaccessible. We maintain this original graph for drawing (so we can see how the path is avoiding the *actual* no-go zones instead of the 'imaginary' no-go zones) but create a deep copy of it to mutate as the version we actually use for pathfinding. It should be noted that the original graph is not used for anything except for plotting, and that only the mutated graph is necessary for plotting a valid path that the mount can then follow.

**Todo**: Currently, the only obstacle on the graph is an artificial line drawn through three-fourths of the addressable azimuths at half of the maximum elevations. We need to load the shapes in from the coordinates marked down as being no-go zones and use that for path finding.
"""

import pandas as pd
import numpy as np

data = pd.read_csv('coords.txt', names=['x', 'y'], dtype={'x': np.float64, 'y': np.float64})
data[['x']] = np.round(data[['x']], decimals=3)
data[['y']] = np.round(data[['y']], decimals=3)

g = list(data.to_records(index=False))

#g = [(x, 45) for x in range (90, 270)]
#g = [(np.random.randint(360), np.random.randint(90)) for i in range(0, 100)

g = list(map(lambda coord: transform_coords(coord[1], coord[0], 41.8352026, time2degrees(8, 32, 1)), g))
#Conversion from altitude & azmuth to RADec
print(g)
#[(37.98002285127933, -0.2189109864782131), (119.03287452125404, -47.81409531062722), (37.98108026704327, -0.2125957857192095), (119.03435355787644, -47.81421148645122), (37.98131452160759, -0.20835962501286542), (119.03435355787644, -47.81421148645122), (77.18085800585621, 80.37670950503701), (127.2640657949012, -48.3344298508205), (112.6947500242154, 53.62936598396489), (127.3623420734393, -19.453917961669397), (99.8645410224618, 51.65234674043396), (126.78135170382804, -20.90158080419013), (37.991527223277714, -0.11331919714562366), (119.04470699946846, -47.815024185265585), (62.91059985275797, 46.381597312853835), (124.80248926737646, -36.01667335089565), (111.02058934734458, 55.209576464623034), (127.31329624975031, -21.258554182197532), (14.336904983146525, 81.24671935836945), (126.99175527862417, -57.88820326510962), (317.2515186300119, 48.34101826469913), (312.3900822539794, -84.60088186815395), (37.98824125850163, -0.1471304519482626), (119.04026977053198, -47.814675999765406), (111.06680725221631, 52.938813492532816), (127.28537804628164, -19.104166079689), (127.72326632299553, 44.11797447854854), (127.99403616516693, -8.569796543718395), (37.978653086956925, -0.2308743982391983), (119.03287452125404, -47.81409531062722), (68.71940640379523, -2.0042484837021814), (122.69554980281607, -17.216081076480144), (122.79634241153806, 52.802670152055754), (127.7807780744508, -17.419437190639712), (105.31004383750577, 49.580590158026844), (126.98455763432126, -17.41229288650515), (113.51735836581058, 35.06557560198013), (127.20671224162919, -1.7067983433658682), (117.46655422670996, 23.183699443781254), (127.33660240215713, 10.62269766761541), (109.99321407111265, 19.405234158626563), (126.79833836463054, 10.635133694815869), (119.54718752442238, 11.889974569820712), (127.39150872973451, 21.813819310258225), (123.23177793712331, 0.5188670334100417), (127.59730633025305, 33.534414540619224), (126.14415405962687, -4.249667888814922), (127.82924536544458, 39.08541953306644), (86.12872553315724, 37.08390561961703), (125.70876784194725, -16.498217432525912), (86.10880362895452, 37.06433666820782), (125.70699286948194, -16.49815772733721), (81.96589769722563, 24.83050546862189), (125.03425146133864, -12.629071886043029), (126.60751215890129, -7.4422064268283625), (127.38018775960786, 40.09277008115797), (42.07647067554994, -0.9683349476705064), (119.67352373852322, -43.68513855147223), (38.44383677308734, 68.15643135133584), (125.52958546654229, -53.81117732868608), (104.31850207493235, 9.233228950344738), (126.15980966226775, 13.630644188446302), (128.004165812893, -6.286797399999989), (128.00416666666666, 41.8352026), (38.8657450075649, -0.15879437393998505), (119.19745176228294, -46.948166571523224), (38.86758200459575, -0.13835891877874465), (119.19890689123031, -46.948280633061835), (38.900169818447424, 0.15656100707229803), (119.22801078045008, -46.95055793677165), (81.46292073375072, 45.324427628103095), (125.73820884329746, -24.3765742647488), (78.01286547873238, 41.86482474681012), (125.42589544570582, -24.36678165271509), (75.65999021570227, 39.021733571177336), (125.17991417326158, -24.358178759835305), (73.59764273485487, 36.11265952450553), (124.93599223110957, -24.3488730026573), (70.94712400183033, 31.62757117565267), (124.5707164220608, -24.333493818658052), (70.36863783780495, 30.508599418480017), (124.48142510358684, -24.329470937966818), (74.01543704761882, 38.54295589993565), (125.06391528116487, -25.226605739839883), (108.88595750506255, 45.55334630572436), (127.09005368049338, -12.745295206912745), (101.20152082291541, 45.913776565978296), (126.72547602354472, -15.564642384304047), (95.7660382483192, 43.14037580579987), (126.39669882609702, -15.557587254034086), (90.3978644410905, 39.69277203551684), (126.02481740490296, -15.723750680025002), (88.21638833432868, 38.29412947124034), (125.86384022105706, -16.017994754228408), (85.76297843889338, 34.31266430242905), (125.60000725331588, -15.023466251980212), (84.63007093581334, 30.89248862876401), (125.41996917243459, -13.795735041007568), (85.20706944175886, 30.437322951802017), (125.44110120769417, -13.129019243701322), (90.8523584302807, 8.19462679307586), (125.05321429701281, 2.1466986687311107), (93.03860591034916, 7.205527501959486), (125.18444556899722, 4.51811266685269), (92.17417400417204, 9.472361594890637), (125.20849383654705, 2.890860622164472), (90.67334597637759, 11.58364735864592), (125.17504923598752, 0.7022306139629964), (90.89137557880308, 12.616663759335745), (125.23077884345525, 0.465798140489545), (89.43071988548306, 14.623165703045665), (125.19520541446973, -1.6803882179089598), (89.68376505442608, 14.851641489561885), (125.22207545511479, -1.563642707943088), (88.23538938594098, 18.061223859614437), (125.23123148519291, -4.273670612943538), (85.92368835010986, 24.76272800213205), (125.30006130174806, -9.492772029896809), (85.6094113793398, 27.42483857228357), (125.36799108889666, -11.157313984167768), (85.58084568266625, 29.73030525162475), (125.4414410310861, -12.46147606180272), (86.6308750958439, 35.15153921650054), (125.67823068883939, -14.974206946273684), (88.65803263168519, 39.12955161359942), (125.91293110250135, -16.317681070480575), (90.42303003027939, 40.567108984033865), (126.05010699295084, -16.321757070110255), (91.77058915861255, 41.56974559041297), (126.14923476054916, -16.32453032910484), (91.7467124511078, 41.07196898684999), (126.13483300867573, -15.97699383019727), (94.7307408265037, 42.657642646743334), (126.33165152003254, -15.667037804847915), (97.2429097188074, 44.05366453409321), (126.49230079695921, -15.619820890749136), (85.95792963901674, 22.10546010006581), (125.2112440167845, -8.107240921698818), (87.4966692862655, 20.882706873670443), (125.27621246874384, -6.258215756515468), (88.16013518135286, 20.046914333561823), (125.29462781991776, -5.302999699324471), (95.92276009751944, 41.539642513491685), (126.37382555444165, -14.242614269579745), (90.57397123745075, 43.169510697631125), (126.1375061417377, -18.089916743200057), (85.51323016081622, 43.34408123428369), (125.88040573952009, -20.883976721391228), (81.19779214324149, 43.31247341852174), (125.65242694301351, -23.298405187732513), (79.27061327052587, 42.45453218692138), (125.5172045344469, -23.932501632132375), (76.40673538652965, 40.76674621417917), (125.29281537977438, -24.780534015513357), (74.25948807303163, 38.08381896919809), (125.05958356493636, -24.834103230996497), (71.3523477032685, 34.59993468610947), (124.72928074979528, -25.291404048048964), (73.25080305648274, 33.27373944595763), (124.79415848352495, -23.294007606433087), (74.88848543556797, 34.151104069066015), (124.93569918309434, -22.492071589836474), (77.55357009079918, 37.35937425179105), (125.22570176157001, -22.225148469459437), (79.56533890375877, 39.20520898421227), (125.41288102500359, -21.902643800102275), (73.22437073946132, 33.20437050072038), (124.7898234765231, -23.281811561506025), (71.57016547824688, 30.707067586257992), (124.57214302993776, -23.46752135771226), (73.74831237186609, 29.842673743811286), (124.68215912003052, -21.400020061543188), (74.1178229691233, 27.106167149148305), (124.5916844428885, -19.946078406384103), (74.85077969504431, 23.8724792504324), (124.50551948153256, -18.027354027202854), (76.40994864313758, 22.36503271838333), (124.55453883617697, -16.114165946040437), (76.37818131205263, 19.678236588467044), (124.43854320534021, -15.102651944263014), (77.2379857159013, 17.581919910757133), (124.41235261551445, -13.57784669204229), (79.18945034414962, 15.87334851875007), (124.48637140083935, -11.223146966198385), (82.0710990684045, 12.908011089381967), (124.57874179375837, -7.570306269154064), (83.22632523981856, 8.913799272584308), (124.49301066228513, -5.205851710463285), (84.9100930401291, 5.712859065408807), (124.47765922584585, -2.706801566390874), (86.86431404915663, 1.7118268596515411), (124.43743500200279, 0.11630562919159933), (92.28258643722776, -2.8837491144675953), (124.63254399255533, 6.201096880031832), (126.4021839552003, -7.482986205824383), (127.62258324593564, 39.8662394144255), (37.75389406113506, -13.944762958705443), (354.65153754752487, 76.12533748237419), (354.698211163315, 76.11349773504939), (354.7064920068111, 76.11055798780251), (39.104853790425466, 4.829678050679183), (39.10385338004981, 4.8247829835561165), (39.10385338004981, 4.8247829835561165), (39.10360243876737, 4.820552975694234), (39.102434846864, 4.812837861585406)]

import pandas as pd
import numpy as np
g =[(37.98002285127933, -0.2189109864782131), (119.03287452125404, -47.81409531062722), (37.98108026704327, -0.2125957857192095), (119.03435355787644, -47.81421148645122), (37.98131452160759, -0.20835962501286542), (119.03435355787644, -47.81421148645122), (77.18085800585621, 80.37670950503701), (127.2640657949012, -48.3344298508205), (112.6947500242154, 53.62936598396489), (127.3623420734393, -19.453917961669397), (99.8645410224618, 51.65234674043396), (126.78135170382804, -20.90158080419013), (37.991527223277714, -0.11331919714562366), (119.04470699946846, -47.815024185265585), (62.91059985275797, 46.381597312853835), (124.80248926737646, -36.01667335089565), (111.02058934734458, 55.209576464623034), (127.31329624975031, -21.258554182197532), (14.336904983146525, 81.24671935836945), (126.99175527862417, -57.88820326510962), (317.2515186300119, 48.34101826469913), (312.3900822539794, -84.60088186815395), (37.98824125850163, -0.1471304519482626), (119.04026977053198, -47.814675999765406), (111.06680725221631, 52.938813492532816), (127.28537804628164, -19.104166079689), (127.72326632299553, 44.11797447854854), (127.99403616516693, -8.569796543718395), (37.978653086956925, -0.2308743982391983), (119.03287452125404, -47.81409531062722), (68.71940640379523, -2.0042484837021814), (122.69554980281607, -17.216081076480144), (122.79634241153806, 52.802670152055754), (127.7807780744508, -17.419437190639712), (105.31004383750577, 49.580590158026844), (126.98455763432126, -17.41229288650515), (113.51735836581058, 35.06557560198013), (127.20671224162919, -1.7067983433658682), (117.46655422670996, 23.183699443781254), (127.33660240215713, 10.62269766761541), (109.99321407111265, 19.405234158626563), (126.79833836463054, 10.635133694815869), (119.54718752442238, 11.889974569820712), (127.39150872973451, 21.813819310258225), (123.23177793712331, 0.5188670334100417), (127.59730633025305, 33.534414540619224), (126.14415405962687, -4.249667888814922), (127.82924536544458, 39.08541953306644), (86.12872553315724, 37.08390561961703), (125.70876784194725, -16.498217432525912), (86.10880362895452, 37.06433666820782), (125.70699286948194, -16.49815772733721), (81.96589769722563, 24.83050546862189), (125.03425146133864, -12.629071886043029), (126.60751215890129, -7.4422064268283625), (127.38018775960786, 40.09277008115797), (42.07647067554994, -0.9683349476705064), (119.67352373852322, -43.68513855147223), (38.44383677308734, 68.15643135133584), (125.52958546654229, -53.81117732868608), (104.31850207493235, 9.233228950344738), (126.15980966226775, 13.630644188446302), (128.004165812893, -6.286797399999989), (128.00416666666666, 41.8352026), (38.8657450075649, -0.15879437393998505), (119.19745176228294, -46.948166571523224), (38.86758200459575, -0.13835891877874465), (119.19890689123031, -46.948280633061835), (38.900169818447424, 0.15656100707229803), (119.22801078045008, -46.95055793677165), (81.46292073375072, 45.324427628103095), (125.73820884329746, -24.3765742647488), (78.01286547873238, 41.86482474681012), (125.42589544570582, -24.36678165271509), (75.65999021570227, 39.021733571177336), (125.17991417326158, -24.358178759835305), (73.59764273485487, 36.11265952450553), (124.93599223110957, -24.3488730026573), (70.94712400183033, 31.62757117565267), (124.5707164220608, -24.333493818658052), (70.36863783780495, 30.508599418480017), (124.48142510358684, -24.329470937966818), (74.01543704761882, 38.54295589993565), (125.06391528116487, -25.226605739839883), (108.88595750506255, 45.55334630572436), (127.09005368049338, -12.745295206912745), (101.20152082291541, 45.913776565978296), (126.72547602354472, -15.564642384304047), (95.7660382483192, 43.14037580579987), (126.39669882609702, -15.557587254034086), (90.3978644410905, 39.69277203551684), (126.02481740490296, -15.723750680025002), (88.21638833432868, 38.29412947124034), (125.86384022105706, -16.017994754228408), (85.76297843889338, 34.31266430242905), (125.60000725331588, -15.023466251980212), (84.63007093581334, 30.89248862876401), (125.41996917243459, -13.795735041007568), (85.20706944175886, 30.437322951802017), (125.44110120769417, -13.129019243701322), (90.8523584302807, 8.19462679307586), (125.05321429701281, 2.1466986687311107), (93.03860591034916, 7.205527501959486), (125.18444556899722, 4.51811266685269), (92.17417400417204, 9.472361594890637), (125.20849383654705, 2.890860622164472), (90.67334597637759, 11.58364735864592), (125.17504923598752, 0.7022306139629964), (90.89137557880308, 12.616663759335745), (125.23077884345525, 0.465798140489545), (89.43071988548306, 14.623165703045665), (125.19520541446973, -1.6803882179089598), (89.68376505442608, 14.851641489561885), (125.22207545511479, -1.563642707943088), (88.23538938594098, 18.061223859614437), (125.23123148519291, -4.273670612943538), (85.92368835010986, 24.76272800213205), (125.30006130174806, -9.492772029896809), (85.6094113793398, 27.42483857228357), (125.36799108889666, -11.157313984167768), (85.58084568266625, 29.73030525162475), (125.4414410310861, -12.46147606180272), (86.6308750958439, 35.15153921650054), (125.67823068883939, -14.974206946273684), (88.65803263168519, 39.12955161359942), (125.91293110250135, -16.317681070480575), (90.42303003027939, 40.567108984033865), (126.05010699295084, -16.321757070110255), (91.77058915861255, 41.56974559041297), (126.14923476054916, -16.32453032910484), (91.7467124511078, 41.07196898684999), (126.13483300867573, -15.97699383019727), (94.7307408265037, 42.657642646743334), (126.33165152003254, -15.667037804847915), (97.2429097188074, 44.05366453409321), (126.49230079695921, -15.619820890749136), (85.95792963901674, 22.10546010006581), (125.2112440167845, -8.107240921698818), (87.4966692862655, 20.882706873670443), (125.27621246874384, -6.258215756515468), (88.16013518135286, 20.046914333561823), (125.29462781991776, -5.302999699324471), (95.92276009751944, 41.539642513491685), (126.37382555444165, -14.242614269579745), (90.57397123745075, 43.169510697631125), (126.1375061417377, -18.089916743200057), (85.51323016081622, 43.34408123428369), (125.88040573952009, -20.883976721391228), (81.19779214324149, 43.31247341852174), (125.65242694301351, -23.298405187732513), (79.27061327052587, 42.45453218692138), (125.5172045344469, -23.932501632132375), (76.40673538652965, 40.76674621417917), (125.29281537977438, -24.780534015513357), (74.25948807303163, 38.08381896919809), (125.05958356493636, -24.834103230996497), (71.3523477032685, 34.59993468610947), (124.72928074979528, -25.291404048048964), (73.25080305648274, 33.27373944595763), (124.79415848352495, -23.294007606433087), (74.88848543556797, 34.151104069066015), (124.93569918309434, -22.492071589836474), (77.55357009079918, 37.35937425179105), (125.22570176157001, -22.225148469459437), (79.56533890375877, 39.20520898421227), (125.41288102500359, -21.902643800102275), (73.22437073946132, 33.20437050072038), (124.7898234765231, -23.281811561506025), (71.57016547824688, 30.707067586257992), (124.57214302993776, -23.46752135771226), (73.74831237186609, 29.842673743811286), (124.68215912003052, -21.400020061543188), (74.1178229691233, 27.106167149148305), (124.5916844428885, -19.946078406384103), (74.85077969504431, 23.8724792504324), (124.50551948153256, -18.027354027202854), (76.40994864313758, 22.36503271838333), (124.55453883617697, -16.114165946040437), (76.37818131205263, 19.678236588467044), (124.43854320534021, -15.102651944263014), (77.2379857159013, 17.581919910757133), (124.41235261551445, -13.57784669204229), (79.18945034414962, 15.87334851875007), (124.48637140083935, -11.223146966198385), (82.0710990684045, 12.908011089381967), (124.57874179375837, -7.570306269154064), (83.22632523981856, 8.913799272584308), (124.49301066228513, -5.205851710463285), (84.9100930401291, 5.712859065408807), (124.47765922584585, -2.706801566390874), (86.86431404915663, 1.7118268596515411), (124.43743500200279, 0.11630562919159933), (92.28258643722776, -2.8837491144675953), (124.63254399255533, 6.201096880031832), (126.4021839552003, -7.482986205824383), (127.62258324593564, 39.8662394144255), (37.75389406113506, -13.944762958705443), (354.65153754752487, 76.12533748237419), (354.698211163315, 76.11349773504939), (354.7064920068111, 76.11055798780251), (39.104853790425466, 4.829678050679183), (39.10385338004981, 4.8247829835561165), (39.10385338004981, 4.8247829835561165), (39.10360243876737, 4.820552975694234), (39.102434846864, 4.812837861585406)]
#inaccessible_points = list(zip(*g))
#print(inaccessible_points)
inaccessible_points_0 = []
inaccessible_points_1 = []
inaccessible_points = []
for i in g:
  inaccessible_points_0.append(i[0])
  inaccessible_points_1.append(i[1])
inaccessible_points = [inaccessible_points_0,inaccessible_points_1 ]
print(inaccessible_points)

import copy
from scipy.spatial import cKDTree
import numpy as np
from queue import PriorityQueue
import math

def slope(p1, p2):
  dx = p2[0]-p1[0]
  dy = p2[1]-p1[1]

  if dx != 0:
    return 1
  elif dy != 0:
    return -1

def diff(l):
  return [slope(l[i], l[i+1]) for i in range(len(l)-1)] + [slope(l[-2], l[-1])]
path = [(3,2),(6,4),(5,6),(8,94)]
prunedPath = np.argwhere(np.diff(diff(path)))
print(prunedPath)

"""Now we have a simple function to run the pathfinding, draw a polar plot with the actual no-go zones, and the path that was found over the 'imaginary' no-go zone graph. The starting and end positions are added as different colored points."""

# Plotting Utilities

def inaccessible(g):
  inaccessibles = []
  for x, d1 in g.items():
    for y, d2 in d1.items():
      inaccessibles.append((x, y))
  return inaccessibles

# Plotting

import matplotlib.pyplot as plt
import numpy as np

def path2point(start, end, pathfinding_graph, drawing_graph):
  path = pathfind(start, end, g)

  plt.figure(figsize=(10, 10))
  plt.axes(projection = 'polar')

  inaccessible_points = list(zip(*g))
  path_points = list(zip(*path))
  plt.polar(np.array(inaccessible_points[0]) * (np.pi/180), inaccessible_points[1], 'r.')
  plt.polar(np.array(path_points[0]) * (np.pi/180), path_points[1], 'b.')
  plt.polar(start[0] * (np.pi/180), start[1], 'co', end[0] * (np.pi/180), end[1], 'yo')

  plt.ylim([0, 90])
  plt.show()

#%prun path2point((229,0), (142,250), g, g)

# Denobola is RA 11h 49m 4s | Dec +14° 34′ 19″

def round16(n):
  '''Round to nearest 1/16th'''
  return math.floor(n*16)/16

print(round16(time2degrees(8+6, 46, 48)))
#path2point((round16(time2degrees(14, 46, 48)), 0), (round16(time2degrees(11, 49, 4)), round16(arc2degrees(14, 34, 19))), g, g)

path2point((0, 0), (80, 35), g, g)


def prune(start, end, path):
  # TEMPORARY CHANGE: easier for swift to ingest [] rather than ()
  prunedPath = [list(start)]
  for i in np.argwhere(np.diff(diff(path))).flatten():
    prunedPath.append(list(path[i+1]))
  prunedPath.append(list(end))
  return prunedPath

denebola = (round16(time2degrees(11, 49, 4)), round16(arc2degrees(14, 34, 19)))

#path = pathfind((round16(time2degrees(14, 46, 48)), 0), denebola, g)
#print(path)
path = pathfind((0, 0), (80, 35), g)
pruned = prune((0, 0), (80, 35), path)
print(pruned)

## Code for showing pruned path in a way that Swift can ingest

#print('[', end='')
#for prune in pruned:
#  print(f'[{prune[0]} : {prune[1]}], ', end='')
#print(']', end='')

"""# Moving the Telescope Along the Path: #

(*This is just for testing, the telescope will be moved by the Python team upon completion*)

Once a path for the telescope has been made, the code will identify the 'corners' of the path. The telescope will then be moved in one direction until it has come close to the first 'corner'. The code will monitor its current position while moving. Once the telescope is close to the desired position, the telescope will be slowed down to prevent it from overshooting. Once the 'corner' has been reached, the telescope will stop and move towards the next 'corner'. This process will continue until it reaches it's final destination.
"""

# # Moving North/South
# self.mount.getSwitchVector("MOUNT_MOTION_DEC").update({"NORTH": "On", "SOUTH": "Off"})

# # Moving East/West
# self.mount.getSwitchVector("MOUNT_MOTION_RA").update({"WEST": "On", "EAST": "Off"}

# # Moving to a point
# self.telescopeClient.gotoCoords(ra, dec)

###########################################################################

# Moving North to a corner

# current_position = 1 # Replace with telescope coordinates from Mount
# path_corner = 5 # Corner of path we want to go to

# self.mount.getSwitchVector("MOUNT_MOTION_DEC").update({"NORTH": "On", "SOUTH": "Off"})
# while current_position != path_corner:
#   current_position = 4 # Insert updated coordinates from mount
# self.mount.getSwitchVector("MOUNT_MOTION_DEC").update({"NORTH": "Off", "SOUTH": "Off"})

"""```for point in points:

  direction_to_move = d2m(current_position(), radec_point)

  move(direction_to_move)

  while distance(queryDirection(), radec_point) > 0.05:

    pass

  stop_move()```
"""